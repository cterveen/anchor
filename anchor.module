<?php

/**
 * @file
 * A page module that strips anchored tags from a book and creates an index from these
 */
  
 /**
 * Load the PHP simple HTML DOM parser if not done yet
 * Somehow include_once does not work as I expect, check whether function
 * str_get_html exist. This might potentially break if someone else uses
 * the same function name.
 *
 * get it here: https://simplehtmldom.sourceforge.io/
 */
if (!function_exists("str_get_html")) {
  include("simple_html_dom.php");
}
 
 /**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
 
function anchor_help($path, $arg) {
  switch ($path) {
    case "admin/help#anchor":
      return '' . t("Displays an index for a book based on named anchors.") . '';
      break;
  }
}

/**
* Implements hook_menu().
*/

function anchor_menu() {
  $items = array();
  $items['book/index/%'] = array(
     'title' => 'Index',
     'page callback' => '_anchor_page',
     'page arguments' => array(2, 'index'),
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
   );
   return $items;
}

/**
 * Page callback for hook_menu()
 *
 * Takes all the content of a node and its children and collects all named
 * anchors with a certain prefix. The named anchors are then printed on
 * alphabetical order.
 *
 * @param $nid
 *   An integer representing the node id (nid) of the node to make an index 
 *   of.
 *
 * @param $prefix
 *   A string that acts as an optional prefix for filtering anchors to be 
 *   collected.
 *
 * @return
 *   The content of the index page in html
*/

function _anchor_page($nid, $prefix) {
  $node = node_load($nid);      
  
  if (isset($node->book)) {
  
    // get the (sub)chapters, contents and index of the book
    $tree = book_menu_subtree_data($node->book);        
    $content = anchor_index_traverse($tree, $prefix);
    $index = anchor_getindex($content, $prefix);
    
    // calculate number of links to decide where to break off the column, count initials double as these take up two lines
    $num_items = count($index) * 2;
    $initials = array_keys($index);
    foreach ($initials as $i) {
      $num_items += count($index[$i]);
    }
    
    // create page output
    $text = "<p>";
    
    // start with an # A - Z
    foreach (array("#","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z") as $initial) {
      if (array_key_exists($initial, $index)) {
        $text .= "<strong><a href = \"#" . $initial . "\">" . $initial . "</a></strong> ";
      }
      else {
        $text .= $initial;
      }
      if ($initial != "Z") {
        $text .= " - ";
      }
    }
    
    $text .= "</p>";
    
    $text .= "<table><tr style = \"background: inherit\"><td width = \"50%\" valign = \"top\">";
    
    // iterate over $index and print links
    $item = 0;
    foreach ($initials as $i) {
      $terms = array_keys($index[$i]);
      
      // Header and named anchor for new cap.
      $text .= "<a name = \"". $i . "\"></a><p><strong>" . $i . "</strong><br>\n";
      
      foreach ($terms as $t) {
        $text .= "<a href = \"" . $index[$i][$t][1] . "\">" . $index[$i][$t][0] . "</a><br>\n";
      }
      $text .= "</p>\n";
      
      // new column?
      $before = $item;
      $item += count($terms) + 2;
      
      if (($before < $num_items/2) and ($item >= $num_items/2)) {
        $text .= "</td><td width = \"50%\" valign = \"top\">";
      }
    }
    
    $text .= "</td></tr></table>";
    
    $page_array['index'] = array(
      '#title' => t('Index'),
      '#markup' => t($text),
    );
  
    return $page_array;
  }
    else {
      drupal_not_found();
    }
}

/**
 * Traverses the book tree and collects all contents for further processing
 *
 * During the traversal, named anchors are adapted to "node/nid#anchor"
 *
 * @param $tree
 *   A subtree of the book menu hierarchy, rooted at the current page.
 *
 * @param $prefix
 *   A string that acts as an optional prefix for filtering anchors to be 
 *   collected.
 *
 * @return
 *   The output generated in visiting each node.
 */

function anchor_index_traverse($tree, $prefix) {
    $output = '';    
    
    foreach ($tree as $data) {
      // Note- access checking is already performed when building the tree.
      if ($node = node_load($data['link']['nid'], FALSE)) {
        $children = '';

        if ($data['below']) {
          $children = anchor_index_traverse($data['below'], $prefix);
        }
      }
      
      $contents = book_node_export($node, $children);
      
      // links are relative references, hence a URL to the node id has to be added
      $html = str_get_html($contents);
      
      $anchors = $html->find('a[name]');
      foreach ($anchors as $a) {
        if (preg_match("/^" . $prefix . "/", $a->name)) {
          $a->name = "/node/" . $data['link']['nid'] . "#" . $a->name;
        }
      }
      $output .= $html;
    }
    
    return $output;  
}

/**
 * Retrieves all named anchors from the text and returns an array of the index terms and links
 *
 * @param $content
 *   The content of the book in html form
 *
 * @param $prefix
 *   A string that acts as an optional prefix for filtering anchors to be 
 *   collected.
 *
 * @return
 *  An array of arrays of arrays of each index item
 *  array of initials
 *    array of items
 *      array of label and link
 */

function anchor_getindex($content, $prefix) {
  $html = str_get_html($content);
  $anchors_raw = $html->find('a[name]');
  $anchors = array();
  
  foreach ($anchors_raw as $a) {
    $link = $a->name;
    // only interested if it's an index anchor. Please note we use links including the URL
    if (!preg_match("/#" . $prefix . "/", $link)) { continue; }
    
    # get the label and initial
    $label = preg_replace("/.+#" . $prefix . "/" , "", $link);
    $initial = strtoupper(substr($label, 0, 1));
    if (is_numeric($initial)) { $initial = "#"; }
    
    if (isset($anchors[$initial])) {
      array_push($anchors[$initial], array($label, $link));
    }
    else {
      $anchors[$initial] = array();
      array_push($anchors[$initial], array($label, $link));
    }
  }
  
  // sort on initial and term
  ksort($anchors);
  $initials = array_keys($anchors);
  foreach ($initials as $i) {
    $terms = array_keys($anchors[$i]);
    foreach ($terms as $t) {
      usort($anchors[$i], "anchor_cmp_terms");
    }
  }
    
  return $anchors;
}

/**
 * Sorts two arrays on the first element
 * @param $a
 *   An array of at least one value
 * 
 * @param $b
 *   The array of at least one value to compare with
 *
 * @return
 *   0 if the first items are the same
 *   -1 if the first item of $a is (alphabetically) ordered before the first item of $b
 *   1 if the first item of $a is (alphabetically) ordered after the first item of $b
 */
 
function anchor_cmp_terms($a, $b) {
  if ($a[0] == $b[0]) { return 0; }
  return ($a[0] < $b[0]) ? -1 : 1;
}
